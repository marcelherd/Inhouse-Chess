// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Used for first-time user setup
    registrationFinished Boolean @default(false)

    // Profile data
    location      String?
    experience    Experience @default(BEGINNER)
    rating        Int        @default(1200)
    highestRating Int        @default(1200)

    submittedRequests   Request[] @relation("submittedRequests")
    receivedRequests    Request[] @relation("receivedRequests")
    proposedWonRequests Request[] @relation("proposedWinner")

    playedGames        Game[] @relation("gamePlayer")
    playedAgainstGames Game[] @relation("gameOpponent")
    wonGames           Game[] @relation("gameWinner")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// A request to add a game that was played, submitted by a user, that has to be confirmed by the opponent
model Request {
    id String @id @default(cuid())

    // If the request was approved by the opponent, a game is created
    game Game?

    // Is set to true if the request was approved or rejected (processed by the recipient)
    // If a request has been processed and no game was created, it was rejected
    processed Boolean @default(false)

    submittedBy    User  @relation(name: "submittedRequests", fields: [submittedById], references: [id])
    receivedBy     User  @relation(name: "receivedRequests", fields: [receivedById], references: [id])
    proposedWinner User? @relation(name: "proposedWinner", fields: [proposedWinnerId], references: [id]) // if not a draw

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    submittedById    String
    receivedById     String
    proposedWinnerId String?
    gameId           String?
}

// A chess game that was played and has been confirmed by both players
model Game {
    id String @id @default(cuid())

    request Request @relation(fields: [requestId], references: [id])

    player   User  @relation(name: "gamePlayer", fields: [playerId], references: [id])
    opponent User  @relation(name: "gameOpponent", fields: [opponentId], references: [id])
    winner   User? @relation(name: "gameWinner", fields: [winnerId], references: [id]) // if not a draw

    // When the request was created
    playedAt DateTime

    playerRating     Int
    opponentRating   Int
    ratingAdjustment Int

    // When the request was approved
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    requestId  String  @unique
    playerId   String
    opponentId String
    winnerId   String?
}

enum Experience {
    BEGINNER
    ADVANCED
    EXPERT
}
